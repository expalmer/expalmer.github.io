<?xml version="1.0" encoding="UTF-8" ?>
  <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">
    <channel>
      <title><![CDATA[Palmer Oliveira. Juntos Aprendemos Mais!]]></title>
      <atom:link href="rss.xml" rel="self" type="application/rss+xml"/>
      <link>http://expalmer.github.io</link>
      <description><![CDATA[Blog sobre FrontEnd, Html, Css e Javascript.]]></description>
      <image>
        <url>http://expalmer.github.io/images/palmer.jpg</url>
        <title>Palmer Oliveira. Juntos Aprendemos Mais!</title>
        <link>http://expalmer.github.io</link>
      </image>
      <pubDate>Sun, 22 Feb 2015 18:03:00 GMT</pubDate>
      <lastBuildDate>Sun, 22 Feb 2015 18:03:00 GMT</lastBuildDate>
      <language>en-US</language>
      <generator>Metalsmith custom plugin</generator>
      <ttl>60</ttl>
      <item>
        <title><![CDATA[Criando um Rest com Slim Framework em poucos minutos - parte 2]]></title>
        <description><![CDATA[Usando Slim Framework juntamente com o Twig Template, Illuminate Database e Validate.]]></description>
        <link>http://expalmer.github.io/criando-um-rest-com-slim-framework-e-illuminate-database-em-poucos-minutos-parte-2/</link>
        <guid isPermaLink="true">http://expalmer.github.io/criando-um-rest-com-slim-framework-e-illuminate-database-em-poucos-minutos-parte-2/</guid>
        <category><![CDATA[php]]></category>
        <category><![CDATA[slimframework]]></category>
        <dc:creator><![CDATA[Palmer Oliveira]]></dc:creator>
        <pubDate>Sun, 22 Feb 2015 14:00:36 GMT</pubDate>
        <content:encoded>
          <![CDATA[<p>No post passado vimos como iniciar um rest com o <a href="http://slimframework.com/">Slim Framework</a>, mas neste post resolvi mudar a abordagem, vamos fazer um <code>CRUD</code> usando o <a href="http://twig.sensiolabs.org/">Twig Template</a>, <a href="https://github.com/illuminate/database">Illuminate Database</a>, <a href="https://github.com/illuminate/validation">Illuminate Validation</a>. Juntos eles formam um bom time!</p>
<p>Vou postar todo código de novo, pois fiz umas modificações na organização dos arquivos, removi, alterei e inclui novos arquivos, e acredito que ficou bem mais organizado. Retirei a parte do REST por enquanto, deixarei apenas o CRUD, mas logo farei novamente o REST para ser consumido pela nossa aplicação no <code>client side</code> por uma lib javascript.</p>
<h3 id="1-os-dados-do-banco-mysql-use-o-mesmo-que-usamos-no-post-passado-">1) Os dados do banco MySql, use o mesmo que usamos no post passado!</h3>
<h3 id="2-estrutura-de-arquivos-do-app">2 ) Estrutura de arquivos do APP</h3>
<pre><code class="lang-javascript">
slim-rest
├── app
│   ├── config
│   │   ├── services.php
│   │   └── twig.php
│   ├── controllers
│   │   ├── baseController.php
│   │   └── guitarController.php
│   ├── models
│   │   └── appModels.php
│   ├── views
│   │   ├── cache
│   │   └── shared
│   │   │   └── layout.html
│   │   ├── guitarForm.html
│   │   ├── guitars.html
│   │   └── index.html
│   ├── routes.php
├── public
│   ├── css
│   │   └── main.css
│   ├── js
│   │   └── app.php
├── .htaccess
├── composer.json
└── index.php
</code></pre>
<h3 id="3-composer-json">3) composer.json</h3>
<pre><code class="lang-javascript">{
  &quot;require&quot;: {
    &quot;slim/slim&quot;: &quot;2.4.3&quot;,
    &quot;slim/views&quot;: &quot;0.1.2&quot;,
    &quot;twig/twig&quot;: &quot;v1.16.2&quot;,
    &quot;illuminate/database&quot;: &quot;v4.2.9&quot;,
    &quot;illuminate/validation&quot;: &quot;*&quot;,
    &quot;illuminate/filesystem&quot;: &quot;*&quot;,
    &quot;illuminate/translation&quot;: &quot;*&quot;,
    &quot;itsgoingd/slim-services&quot;: &quot;dev-master&quot;
  },
  &quot;autoload&quot;: {
    &quot;classmap&quot;: [
      &quot;app/controllers&quot;,
      &quot;app/models&quot;
    ]
  }
}
</code></pre>
<p>Vamos comentar as dependências.</p>
<ul>
<li><strong>slim/slim</strong>: Nosso framework.</li>
<li><strong>slim/views</strong>: Para permitir usar um template engine.</li>
<li><strong>twig/twig</strong>: Nosso template</li>
<li><strong>illuminate/database</strong>: Nosso ORM.</li>
<li><strong>illuminate/validation</strong>: Para fazer as validações dos dados.</li>
<li><strong>illuminate/filesystem, illuminate/translation</strong>: São requeridos pelo slim-services para fazer as tretas dele.</li>
<li><strong>itsgoingd/slim-services</strong>: É uma lib para adicionar o serviços de uma forma simples no slim.</li>
</ul>
<h2 id="4-instalando-as-depend-ncias-com-composer-">4) Instalando as dependências com Composer.</h2>
<ol>
<li>Crie o diretório <code>slim-rest</code>.</li>
<li>Baixe o Composer.<pre><code class="lang-bash">$ curl -sS https://getcomposer.org/installer | php
</code></pre>
</li>
<li>Instale as dependências.<pre><code class="lang-bash">$ php composer.phar install
</code></pre>
</li>
</ol>
<p>Aqui temos um detalhe legal, no <code>composer.json</code> note o trecho <code>&quot;autoload&quot;</code>, dentro do <code>&quot;classmap&quot;</code> estamos mapeando tudo que for classe dentro dos diretórios informados, isso significa que não precisa ficar dando include das classes que estiverem dentro das pastas informadas.</p>
<p>Mas tem outro ponto, onde temos que dar um comando para esse mapeamento acontecer, faça assim no terminal dentro da pasta raiz.</p>
<pre><code class="lang-bash">$ php composer.phar dump-autoload
</code></pre>
<p>Isso vai criar os mapeamentos, que você pode acompanhar dentro da pasta <code>vendor/composer/autoload_classmap.php</code>. Lindo né! Lembre-se que quando criar uma pasta nova, precisa dar o comando novamente.</p>
<p>Não se esqueça desse comando, se alguma classe não for reconhecida pelo Slim, é bem provável que você tenha que rodar ele.</p>
<p>Vamos para os arquivos.</p>
<h2 id="5-index-php">5) index.php</h2>
<p>Esse é nosso arquivo principal de entrada do APP.</p>
<pre><code class="lang-php">&lt;?php
# === Para mostrar todos erros
error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);
ini_set(&#39;display_errors&#39;,&#39;On&#39;);

# === Session
session_cache_limiter(false);
@session_start();

# === Constants
# ==================================================
// coloque o caminho certo do teu server
define(&quot;_BASEURL&quot;, &#39;http://localhost/slim-rest/&#39;);

# === Autoload
# ==================================================
require_once &#39;vendor/autoload.php&#39;;

# === Slim Initialize
# ==================================================
$app = new \Slim\Slim(array(
  &#39;debug&#39;                =&gt; true,
  &#39;mode&#39;                 =&gt; &#39;development&#39;,
  &#39;templates.path&#39;       =&gt; &#39;app/views&#39;,
  &#39;database.fetch&#39;       =&gt; PDO::FETCH_CLASS,
  &#39;database.default&#39;     =&gt; &#39;main&#39;,
  &#39;database.connections&#39; =&gt; array(
    // coloquei os dados do banco diretamente aqui agora.
    &#39;main&#39; =&gt; array(
      &#39;driver&#39;    =&gt; &#39;mysql&#39;,
      &#39;host&#39;      =&gt; &#39;localhost&#39;,
      &#39;database&#39;  =&gt; &#39;music&#39;,
      &#39;username&#39;  =&gt; &#39;root&#39;,
      &#39;password&#39;  =&gt; &#39;root&#39;,
      &#39;charset&#39;   =&gt; &#39;utf8&#39;,
      &#39;collation&#39; =&gt; &#39;utf8_unicode_ci&#39;,
      &#39;prefix&#39;    =&gt; &#39;&#39;
    )
  )
));

# === Slim Services
# ==================================================
require_once &#39;app/config/services.php&#39;;

# === Twig Template
# ==================================================
require_once &#39;app/config/twig.php&#39;;

# === Routes
# ==================================================
require_once &#39;app/routes.php&#39;;

# === Run Slim
$app-&gt;run();
</code></pre>
<h2 id="6-htaccess">6) .htaccess</h2>
<pre><code class="lang-bash">RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [QSA,L]
</code></pre>
<h2 id="7-app-config-services-php">7) app/config/services.php</h2>
<pre><code class="lang-php">&lt;?php
use SlimServices\ServiceManager;
$services = new ServiceManager( $app );
$services-&gt;registerServices(array(
  &#39;Illuminate\Events\EventServiceProvider&#39;,
  &#39;Illuminate\Database\DatabaseServiceProvider&#39;,
  &#39;Illuminate\Filesystem\FilesystemServiceProvider&#39;,
  &#39;Illuminate\Translation\TranslationServiceProvider&#39;,
  &#39;Illuminate\Validation\ValidationServiceProvider&#39;
));
</code></pre>
<h2 id="8-app-config-twig-php">8) app/config/twig.php</h2>
<pre><code class="lang-php">&lt;?php
$twig = new \Slim\Views\Twig();
$app-&gt;view( $twig );
$app-&gt;view-&gt;parserOptions = array(
  &#39;charset&#39;          =&gt; &#39;utf-8&#39;,
  &#39;cache&#39;            =&gt; realpath(&#39;app/views/cache&#39;),
  &#39;auto_reload&#39;      =&gt; true,
  &#39;strict_variables&#39; =&gt; false,
  &#39;autoescape&#39;       =&gt; true
);
/* Twig Globals
=========================================================== */
# O que setarmos aqui, será visto dentro das views, simple assim.
$twig-&gt;getEnvironment()-&gt;addGlobal(&#39;baseUrl&#39;, _BASEURL);
$twig-&gt;getEnvironment()-&gt;addGlobal(&#39;public&#39;, _BASEURL . &#39;public&#39;);
</code></pre>
<h2 id="9-app-models-appmodels-php">9) app/models/appModels.php</h2>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Eloquent\Model as Eloquent;

class Brands extends Eloquent
{
  protected $table = &#39;brands&#39;;
}

class Series extends Eloquent
{
  protected $table = &#39;series&#39;;
}

class Guitars extends Eloquent
{
  protected $table = &#39;guitars&#39;;

  public function Brand() {
    return $this-&gt;hasOne(&#39;Brands&#39;,&#39;id&#39;, &#39;fk_brands&#39;);
  }

  public function Serie() {
    return $this-&gt;hasOne(&#39;Series&#39;,&#39;id&#39;, &#39;fk_series&#39;);
  }
}
</code></pre>
<h2 id="10-app-routes-php">10) app/routes.php</h2>
<p>Aqui vamos mudar o jeito de chamar nossas rotas, vamos criar um arquivo <code>routes.php</code> que invacará as classes dos controllers. Fica mais organizado!</p>
<p>A forma do Slim invocar uma classe, em vez de chamar a função normal, é colocando o padrão <code>$app-&gt;get(&quot;/url-da-rota&quot;, &quot;NomeDaClasse:Metodo&quot;);</code>, sacou, nome da classe + dois pontos + o método.</p>
<pre><code class="lang-php">&lt;?php

# Index
$app-&gt;get(&quot;/&quot;, &quot;BaseController:index&quot;);

# Listagem
$app-&gt;get(&quot;/guitars&quot;, &quot;GuitarController:guitars&quot;);

# Form Insert e Update
$app-&gt;get(&quot;/guitar/insert&quot;, &quot;GuitarController:guitarFormInsert&quot;);
$app-&gt;get(&quot;/guitar/update/:id&quot;, &quot;GuitarController:guitarFormUpdate&quot;);

# Ações CRUD
$app-&gt;post(&quot;/guitar&quot;, &quot;GuitarController:guitarCreate&quot;);
$app-&gt;put(&quot;/guitar/:id&quot;, &quot;GuitarController:guitarUpdate&quot;);
$app-&gt;delete(&quot;/guitar/:id&quot;, &quot;GuitarController:guitarDelete&quot;);
</code></pre>
<h2 id="11-app-controllers-basecontrollers-php">11) app/controllers/baseControllers.php</h2>
<p>Outra forma de organizar, é criar uma classe base, para que seja extendida para as demais classes controllers que você criar, pois quando precisar criar um método que seja compartilhado por todas as classes, coloque a mesma na classe <code>baseController.php</code>!</p>
<p>Aqui já faço isso, instancio o Slim como <code>$this-&gt;app</code>, e usarei no meu controller. Também aqui já coloquei a rota <code>index</code>.</p>
<pre><code class="lang-php">&lt;?php

use Slim\Slim as Slim;

class BaseController {

  public $app;

  function __construct() {
    $this-&gt;app = Slim::getInstance();
  }

  public function index() {

    $links = array(
      array(&#39;name&#39; =&gt; &#39;Listagem de Guitarras&#39;, &#39;endpoint&#39; =&gt; &#39;guitars&#39; )
    );

    $this-&gt;app-&gt;view-&gt;setData(&#39;links&#39;,$links);
    $this-&gt;app-&gt;render(&quot;index.html&quot;);

  }
}
</code></pre>
<h2 id="12-app-controllers-guitarcontrollers-php">12) app/controllers/guitarControllers.php</h2>
<p>Esse é o aquivo mais extenso, então vou comentar no código mesmo.</p>
<pre><code class="lang-php">&lt;?php

# Instancia do Validate
use Illuminate\Support\Facades\Validator as Validator;

class GuitarController extends BaseController {

  # Listagem
  public function guitars() {

    $options = array(
      &#39;title&#39;  =&gt; &#39;Listagem de Guitarras&#39;,
      &#39;insert&#39; =&gt; &#39;Inserir nova Guitarra&#39;
    );

    $items = Guitars::with(&#39;Brand&#39;)
                    -&gt;with(&#39;Serie&#39;)
                    -&gt;orderBy(&#39;updated_at&#39;,&#39;DESC&#39;)
                    -&gt;get()
                    -&gt;toArray();

    // é assim que você passa variáveis para o twig template, usando setData
    // dentro da view ele estará disponível como {{ items }} e {{ options }}
    $this-&gt;app-&gt;view-&gt;setData(&#39;items&#39;, $items);
    $this-&gt;app-&gt;view-&gt;setData(&#39;options&#39;, $options);

    return $this-&gt;app-&gt;render(&quot;guitars.html&quot;);

  }

  # lembre-se que para enviarmos POST, PUT e DELETE, precisamos ter um
  # input  name=_METHOD com o valor correspondente (ex: value=PUT), para que
  # seja entendido pelo framework.

  # Form Insert
  public function guitarFormInsert() {

    // flash messages são mensagens compartilhadas de uma rota para outra
    // aqui verifico se existe alguma flash message, se sim, seto na view
    $flash = $this-&gt;app-&gt;view()-&gt;getData(&#39;flash&#39;);
    if( isset($flash[&#39;post&#39;]) ) {
      $this-&gt;app-&gt;view-&gt;setData(&#39;item&#39;, $flash[&#39;post&#39;] );
    }

    $options = array(
      &#39;title&#39;   =&gt; &#39;Nova Guitarra&#39;,
      &#39;button&#39;  =&gt; &#39;Salvar Guitarra&#39;,
      &#39;action&#39;  =&gt; &#39;guitar&#39;,
      &#39;method&#39;  =&gt; &#39;POST&#39;,
      &#39;_method&#39; =&gt; &#39;POST&#39;,
      &#39;brands&#39;  =&gt; Brands::all()-&gt;lists(&#39;id&#39;, &#39;description&#39;),
      &#39;series&#39;  =&gt; Series::all()-&gt;lists(&#39;id&#39;, &#39;description&#39;)
    );

    $this-&gt;app-&gt;view-&gt;setData(&#39;options&#39;, $options);

    return $this-&gt;app-&gt;render(&quot;guitarForm.html&quot;);

  }

  # Form Update
  public function guitarFormUpdate( $id ) {

    $guitar = Guitars::find($id);
    if( !$guitar ) {
      $this-&gt;app-&gt;redirect( _BASEURL . &#39;guitars&#39;);
    }

    $this-&gt;app-&gt;view-&gt;setData(&#39;item&#39;, $guitar );

    $options = array(
      &#39;title&#39;   =&gt; &#39;Alterando a Guitarra &#39; . $id,
      &#39;button&#39;  =&gt; &#39;Alterar Guitarra&#39;,
      &#39;action&#39;  =&gt; &#39;guitar/&#39; . $id,
      &#39;method&#39;  =&gt; &#39;POST&#39;,
      &#39;_method&#39; =&gt; &#39;PUT&#39;,
      &#39;brands&#39;  =&gt; Brands::all()-&gt;lists(&#39;id&#39;, &#39;description&#39;),
      &#39;series&#39;  =&gt; Series::all()-&gt;lists(&#39;id&#39;, &#39;description&#39;)
    );

    $this-&gt;app-&gt;view-&gt;setData(&#39;options&#39;, $options);

    return $this-&gt;app-&gt;render(&quot;guitarForm.html&quot;);

  }

  # Validation: é coisa linda, você separa por pipe as regras ( pode usar array também )
  # principalmente quando precisa usar regex que possui pipe.
  # confira as regras no site do laravel framework http://laravel.com/docs/4.2/validation

  private function getGuitarValidationRules() {
    return array(
      &#39;fk_brands&#39;   =&gt; &#39;required|integer&#39;,
      &#39;fk_series&#39;   =&gt; &#39;required|integer&#39;,
      &#39;description&#39; =&gt; &#39;required|min:2|max:10|regex:/^([A-Za-z0-9 ]*)$/&#39;
    );
  }

  # Validation: você pode criar mensagens custom para cada campo e tipo de validação
  # e esse &quot;:attribute&quot; é substituido pelo nome do campo.
  private function getGuitarValidationMessages() {
    return array(
      &#39;fk_brands.required&#39;   =&gt; &#39;required :attribute. Coloque uma Marca rapá!&#39;,
      &#39;fk_series.required&#39;   =&gt; &#39;required :attribute. Coloque uma Série mano!&#39;,
      &#39;description.required&#39; =&gt; &#39;required :attribute. Coloque o nome da guitarra!&#39;,
      &#39;description.min&#39;      =&gt; &#39;min :attribute. Ixi, tem pouca letra!&#39;,
      &#39;description.max&#39;      =&gt; &#39;max :attribute. Uau, tem muita letra!&#39;,
      &#39;description.regex&#39;    =&gt; &#39;regex :attribute. Opsss regex está errado véi!&#39;
    );
  }

  # só para pegar os dados enviados pelo post
  private function getGuitarParams() {
    return array(
      &#39;fk_brands&#39;   =&gt; $this-&gt;app-&gt;request-&gt;params(&quot;fk_brands&quot;, false),
      &#39;fk_series&#39;   =&gt; $this-&gt;app-&gt;request-&gt;params(&quot;fk_series&quot;, false),
      &#39;description&#39; =&gt; $this-&gt;app-&gt;request-&gt;params(&quot;description&quot;, false)
    );
  }

  # Validation: Aqui a validação acontece, passe para o validator 3 coisas:
  # 1:dados post 2:regras 3:mensagens. O método -&gt;fails() retorno true ou false.
  # Se deu false, você pega as mensagens de erros no método errors-&gt;getMessage()
  private function guitarValidationFails() {

    $post      = $this-&gt;getGuitarParams();
    $rules     = $this-&gt;getGuitarValidationRules();
    $messages  = $this-&gt;getGuitarValidationMessages();
    # Note que a lib slim-services já colocou no slim a instancia Validator.
    $validator = $this-&gt;app-&gt;validator-&gt;make( $post, $rules, $messages );

    return $validator-&gt;fails() ? $validator-&gt;errors()-&gt;getMessages() : false;

  }

  # super útil esse método, se passar um $id então é um Update, se não é Insert.
  private function saveOrUpdateGuitar( $id = false ) {

    if ( $id ) {
      $guitar = Guitars::find($id);
    } else {
      $guitar = new Guitars();
    }

    $post = $this-&gt;getGuitarParams();

    $guitar-&gt;fk_brands   = $post[&#39;fk_brands&#39;];
    $guitar-&gt;fk_series   = $post[&#39;fk_series&#39;];
    $guitar-&gt;description = $post[&#39;description&#39;];

    $guitar-&gt;save();

    return true;

  }


  # method post to create
  public function guitarCreate() {

    $errors = $this-&gt;guitarValidationFails();

    if ( $errors  ) {
      # olha aqui setando os flash messages.
      $this-&gt;app-&gt;flash(&#39;message&#39;, &#39;Opppppa! Tem alguns erros na área!!!&#39;);
      $this-&gt;app-&gt;flash(&#39;errors&#39;, $errors );
      $this-&gt;app-&gt;flash(&#39;post&#39;, $this-&gt;getGuitarParams() );
      # redireciono de volta para o form com as mensagens de erros e os
      # dados preenchidos no form
      return $this-&gt;app-&gt;redirect(_BASEURL . &quot;guitar/insert&quot;);

    } else {
      # aqui deu tudo certo, então faz insert e redireciona para listagem
      $this-&gt;saveOrUpdateGuitar();
      $this-&gt;app-&gt;flash(&#39;message&#39;, &#39;Oba! Salvou certinho!&#39;);
      return $this-&gt;app-&gt;redirect(_BASEURL . &quot;guitars&quot;);

    }

  }

  # method put to update
  public function guitarUpdate( $id ) {

    # usamos mesmo metodo para validação
    $errors = $this-&gt;guitarValidationFails();

    if ( $errors  ) {
      # aqui devolvo além dos erros, os dados originais e não os preenchidos no form.
      $post = Guitars::find($id);
      $this-&gt;app-&gt;flash(&#39;message&#39;, &#39;Opppppa! Tem alguns erros na área!!!&#39;);
      $this-&gt;app-&gt;flash(&#39;errors&#39;, $errors );
      $this-&gt;app-&gt;flash(&#39;post&#39;, $post );

      return $this-&gt;app-&gt;redirect(_BASEURL . &quot;guitar/update/{$id}&quot;);

    } else {
      # tudo certo, faz update e redireciona para listagem
      $this-&gt;saveOrUpdateGuitar( $id );
      $this-&gt;app-&gt;flash(&#39;message&#39;, &#39;Oba! Alterou certinho!&#39;);
      return $this-&gt;app-&gt;redirect(_BASEURL . &quot;guitars&quot;);

    }

  }

  # method delete to remove
  public function guitarDelete( $id ) {

    $guitar = Guitars::find($id);
    $guitar-&gt;delete();
    $this-&gt;app-&gt;flash(&#39;message&#39;, &#39;Certo! Deletado !&#39;);
    return $this-&gt;app-&gt;redirect(_BASEURL . &quot;guitars&quot;);

  }

}
</code></pre>
<h2 id="13-app-views-shared-layout-html">13) app/views/shared/layout.html</h2>
<p>Agora vamos para nossos arquivos <code>Twig</code>. O Twig é meu template favorito, ele é muito rápido por cachear as páginas geradas na pasta <code>views/cache</code>, então já sabe, você só cria ela e deixa que o Twig se encarrega de administrar.</p>
<p>Leia a <a href="http://twig.sensiolabs.org/documentation">documentação do Twig</a>, e verá que ele possui muitos métodos úteis e inteligêntes que te darão muita agilidade no desenvolvimento.</p>
<p>Esse é o aquivo principal, onde no block <code>content</code> será inserido o conteúdo do template chamado pelo controller, através de um <code>extends</code>.</p>
<pre><code class="lang-twig">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Slim Framework + Twig Template + Illuminate Database/Validation&lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;{{public}}/css/main.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;header class=&quot;header&quot;&gt;
      &lt;h1&gt;&lt;a href=&quot;{{baseUrl}}&quot;&gt;Slim Framework + Twig Template + Illuminate Database/Validation&lt;/a&gt;&lt;/h1&gt;
    &lt;/header&gt;
    {% if flash[&#39;message&#39;] %}
      &lt;div class=&quot;alert&quot;&gt;
        &lt;p&gt;{{flash[&#39;message&#39;]}}&lt;/p&gt;
      &lt;/div&gt;
    {% endif %}
    {% block content %}{% endblock %}
    &lt;footer class=&quot;footer&quot;&gt;
      &lt;a href=&quot;http://slimframework.com/&quot;&gt;Slim Framework&lt;/a&gt; +
      &lt;a href=&quot;http://twig.sensiolabs.org&quot;&gt;Twig Template&lt;/a&gt; +
      &lt;a href=&quot;https://github.com/illuminate/database&quot;&gt;Illuminate Database&lt;/a&gt; +
      &lt;a href=&quot;https://github.com/illuminate/validation&quot;&gt;Illuminate Validation&lt;/a&gt; ;)
    &lt;/footer&gt;
  &lt;/div&gt;
  &lt;script src=&quot;{{public}}/js/app.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="14-app-views-index-html">14) app/views/index.html</h2>
<pre><code class="lang-twig">{% extends &#39;shared/layout.html&#39; %}
{% block content %}
&lt;section class=&quot;section&quot;&gt;
  &lt;ul class=&quot;list&quot;&gt;
    {% for link in links %}
    &lt;li&gt;
      &lt;a href=&quot;{{baseUrl}}{{link.endpoint}}&quot; class=&quot;button&quot;&gt;
        &lt;strong&gt;{{link.name}}&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/li&gt;
    {% endfor %}
  &lt;/ul&gt;
&lt;/section&gt;
{% endblock %}
</code></pre>
<h2 id="15-app-views-guitars-html">15) app/views/guitars.html</h2>
<pre><code class="lang-twig">{% extends &#39;shared/layout.html&#39; %}
{% block content %}
  &lt;section class=&quot;section&quot;&gt;
    &lt;h2&gt;{{options.title}}&lt;/h2&gt;
    &lt;ul class=&quot;list&quot;&gt;
      &lt;li&gt;
        &lt;a href=&quot;{{baseUrl}}guitar/insert&quot; class=&quot;button&quot;&gt;
          &lt;strong&gt;{{options.insert}}&lt;/strong&gt;
        &lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;table class=&quot;table&quot;&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Brand&lt;/th&gt;
          &lt;th&gt;Serie&lt;/th&gt;
          &lt;th&gt;Guitar&lt;/th&gt;
          &lt;th&gt;Criado em&lt;/th&gt;
          &lt;th&gt;Alterado em&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        {% for i in items %}
        &lt;tr&gt;
          &lt;td&gt;
            {{i.brand.description}}
          &lt;/td&gt;
          &lt;td&gt;
            {{i.serie.description}}
          &lt;/td&gt;
          &lt;td&gt;{{i.description}}&lt;/td&gt;
          &lt;td&gt;{{i.created_at|date(&quot;m/d/Y H:i:s&quot;)}}&lt;/td&gt;
          &lt;td&gt;{{i.updated_at|date(&quot;m/d/Y H:i:s&quot;)}}&lt;/td&gt;
          &lt;td&gt;
            &lt;a href=&quot;{{baseUrl}}guitar/update/{{ i.id }}&quot; class=&quot;button button-sm&quot;&gt;Editar&lt;/a&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;form action=&quot;{{baseUrl}}guitar/{{ i.id }}&quot; method=&quot;POST&quot; class=&quot;js-delete-form&quot;&gt;
              &lt;input type=&quot;hidden&quot; name=&quot;_METHOD&quot; value=&quot;DELETE&quot;&gt;
              &lt;div class=&quot;form-group&quot;&gt;
                &lt;button type=&quot;submit&quot; class=&quot;button button-sm button-dl&quot;&gt;Remover&lt;/button&gt;
              &lt;/div&gt;
            &lt;/form&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
        {% endfor %}
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/section&gt;
{% endblock %}
</code></pre>
<h2 id="16-app-views-guitarform-html">16) app/views/guitarForm.html</h2>
<p>Estou usando um único arquivo para o formulário de insert/update. Basta organizar!</p>
<pre><code class="lang-twig">{% extends &#39;shared/layout.html&#39; %}
{% block content %}
  &lt;section class=&quot;section&quot;&gt;
    &lt;h2&gt;{{options.title}}&lt;/h2&gt;
    &lt;form action=&quot;{{baseUrl}}{{options.action}}&quot; class=&quot;form&quot; method=&quot;{{options.method}}&quot;&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;_METHOD&quot; value=&quot;{{options._method}}&quot;&gt;
      &lt;div class=&quot;form-group {% if flash[&#39;errors&#39;][&#39;fk_brands&#39;] is defined%}has-error{% endif %}&quot;&gt;
        &lt;label for=&quot;fk_brands&quot;&gt;Brand&lt;/label&gt;
        &lt;select name=&quot;fk_brands&quot; id=&quot;fk_brands&quot; class=&quot;form-control&quot;&gt;
          &lt;option value=&quot;&quot;&gt;-&lt;/option&gt;
          {% for key, value in options.brands %}
              {% if value == item.fk_brands %}
                {% set sel = &quot;selected=selected&quot; %}
              {% else %}
                {% set sel = &quot;&quot; %}
              {% endif %}
              &lt;option value=&quot;{{value}}&quot; {{sel}}&gt;{{key}}&lt;/option&gt;
          {% endfor %}
        &lt;/select&gt;
        {% if flash[&#39;errors&#39;][&#39;fk_brands&#39;] is defined %}
        &lt;span class=&quot;error&quot;&gt;
          {{ flash[&#39;errors&#39;][&#39;fk_brands&#39;]|join(&#39; &#39;) }}
        &lt;/span&gt;
        {% endif %}
      &lt;/div&gt;
      &lt;div class=&quot;form-group {% if flash[&#39;errors&#39;][&#39;fk_series&#39;] is defined %}has-error{% endif %}&quot;&gt;
        &lt;label for=&quot;fk_series&quot;&gt;Series&lt;/label&gt;
        &lt;select name=&quot;fk_series&quot; id=&quot;fk_series&quot; class=&quot;form-control&quot;&gt;
          &lt;option value=&quot;&quot;&gt;-&lt;/option&gt;
          {% for key, value in options.series %}
              {% if value == item.fk_series %}
                {% set sel = &quot;selected=selected&quot; %}
              {% else %}
                {% set sel = &quot;&quot; %}
              {% endif %}
              &lt;option value=&quot;{{value}}&quot; {{sel}}&gt;{{key}}&lt;/option&gt;
          {% endfor %}
        &lt;/select&gt;
        {% if flash[&#39;errors&#39;][&#39;fk_series&#39;] is defined %}
        &lt;span class=&quot;error&quot;&gt;
          {{ flash[&#39;errors&#39;][&#39;fk_series&#39;]|join(&#39; &#39;) }}
        &lt;/span&gt;
        {% endif %}
      &lt;/div&gt;
      &lt;div class=&quot;form-group {% if flash[&#39;errors&#39;][&#39;description&#39;] is defined%}has-error{% endif %}&quot;&gt;
        &lt;label for=&quot;description&quot;&gt;Descrição&lt;/label&gt;
        &lt;input type=&quot;text&quot; name=&quot;description&quot; id=&quot;description&quot; class=&quot;form-control&quot; value=&quot;{{item.description}}&quot;&gt;
        {% if flash[&#39;errors&#39;][&#39;description&#39;] is defined%}
        &lt;span class=&quot;error&quot;&gt;
          {{ flash[&#39;errors&#39;][&#39;description&#39;]|join(&#39;&lt;br&gt;&#39;)|raw }}
        &lt;/span&gt;
        {% endif %}
      &lt;/div&gt;
      &lt;div class=&quot;form-group&quot;&gt;
        &lt;button class=&quot;button&quot; type=&quot;submit&quot;&gt;{{options.button}}&lt;/button&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  &lt;/section&gt;
{% endblock %}
</code></pre>
<h2 id="17-public-css-main-css">17) public/css/main.css</h2>
<p>Vamos dar um estilo.</p>
<pre><code class="lang-css">html {
  text-align: center;
  font: 100%/1.5 &#39;Arial&#39;, sans-serif;
  font-weight: 400;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
*, *:before, *:after {
  padding: 0;
  margin: 0;
  -webkit-box-sizing: inherit;
     -moz-box-sizing: inherit;
          box-sizing: inherit;
}
body {
  background-color: #fcfcfc;
  color: #333;
}

a {
  color: #DE4F4F;
}
a:hover {
  color: #000;
}

h1 {
  padding: 10px;
  font-size: 1.3em;
}
h1 a {
  color: #fff;
  text-decoration: none;
}
h1 a:hover {
  color: #fce5e5;
}

h2 {
  font-size: 1.2em;
  text-transform: uppercase;
  font-weight: 700;
  color: #222;
}

.container {
  margin: 40px auto;
  max-width: 700px;
}

.header {
  background-color: #DE4F4F;
  border: solid 2px #DE4F4F;
  border-radius: 4px;
}

.section {

}

.list {
  margin: 0 auto;
  max-width: 300px;
}

.list li {
  margin: 10px 0;
  list-style: none;
}

.footer, .section {
  margin: 10px 0;
  padding: 10px;
  border: solid 2px #DE4F4F;
  border-radius: 4px;
  font-size: 0.9em;
  color: #999;
}

table {
  width: 100%;
  margin-bottom: 20px;
  max-width: 100%;
  background-color: transparent;
  border-collapse: collapse;
  border-spacing: 0;
}

table thead {
  text-align: left;
}
table thead &gt; tr &gt; th {
  padding: 20px 8px;
  color: #444;
  font-weight: 700;
  background: #f6f6f6;
  border-bottom: 1px solid #ddd;
  font-size: 0.9em;
}

table tbody &gt; tr &gt; td {
  text-align: left;
  padding: 14px 8px;
  line-height: 1.428571429;
  vertical-align: middle;
  border-top: 1px solid #f1f1f1;
  font-size: 0.8em;
}

table tbody &gt; tr &gt; td small {
  display: block;
  font-size: 0.8em;
  color: #999;
}

.form-group {
  margin: 0 auto;
  padding: 4px;
  max-width: 300px;
  margin-bottom: 4px;
  text-align: left;
}
.form-group label {
  margin: 0 0 4px;
  font-size: .9em;
  font-weight: 700;
  line-height: 1.7;
  color: #444;
  display: block;
}

.form-control {
  display: block;
  margin: 0 0 2px;
  padding: 0 0 0 10px;
  text-indent: 10px;
  width: 100%;
  height: 40px;
  font-size: 0.9em;
  line-height: 1.42857143;
  color: #444;
  border: 2px solid #ccc;
  border-radius: 4px;
  outline: none;
  box-shadow: inset 1px 1px 2px rgba(0,0,0,0.05);
  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
  -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
}
.form-control:focus {
  border-color: #de4f4f;
}

select.form-control {
  text-indent: 0px;
  height: 40px;
}

.error {
  display: none;
  color: #fff;
  font-size: 0.8em;
  padding: 4px 12px;
  border-radius: 3px;
  border: 1px solid #8F3DBE;
  background: #8F3DBE;
  -webkit-transition: all ease-in-out .15s, all ease-in-out .15s;
     -moz-transition: all ease-in-out .15s, all ease-in-out .15s;
          transition: all ease-in-out .15s, all ease-in-out .15s;
  -webkit-transform: scale(0);
     -moz-transform: scale(0);
          transform: scale(0);
}

.has-error .error {
  display: inline-block;
  -webkit-transform: scale(1);
    -moz-transform: scale(1);
         transition: all ease-in-out .15s, all ease-in-out .15s;
}
.has-error .form-control {
  border-color: #8F3DBE!important;
}

.button {
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  border: 2px solid #de4f4f;
  white-space: nowrap;
  padding: 8px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  border-radius: 4px;
  background: #FFF;
  color: #de4f4f;
  -webkit-transition: all 0.2s linear;
     -moz-transition: all 0.2s linear;
          transition: all 0.2s linear;
  text-decoration: none;
  width: 100%;
}

.button:hover,
.button:focus {
  border: 2px solid #de4f4f;
  background-color: #de4f4f;
  color: white;
}
.button:focus {
  outline: 0;
}

.button-sm {
  padding: 4px 6px;
  font-size: 12px;
  text-align: center;
}

.button-dl {
  text-align: center;
  background: #CC0000;
  color: #fff;
}

.alert {
  margin: 20px auto;
}
.alert p {
  padding: 20px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
  color: #fff;
  background: #8F3DBE;
  text-shadow: 0 1px 4px rgba(0,0,0,0.3);
}
</code></pre>
<h2 id="18-public-js-app-js">18) public/js/app.js</h2>
<p>Só um script para mostrar um confirm quando exluir.</p>
<pre><code class="lang-javascript">;(function() {

  &#39;use strict&#39;;

  var app = App.prototype;

  function App(){
    this.init();
  };

  app.init = function () {
    this.$form = document.querySelectorAll(&#39;.js-delete-form&#39;);
    for (var prop in this.$form) {
      if ( this.$form.hasOwnProperty(prop) ) {
        this.$form[prop].onsubmit = this.onSubmit;
      }
    }
  };

  app.onSubmit = function () {
    if ( confirm(&#39;Deseja mesmo excluir rapá ?&#39;) ) {
      return true;
    }
    return false;
  };

  document.addEventListener( &#39;DOMContentLoaded&#39;, new App(), false );

})();
</code></pre>
<p>Pronto!!!</p>
<p>Agora abra seu browser no endereço do seu APP, no meu caso é <code>http://localhost/slim-rest/</code>.</p>
<p>Extenso né ? Sei disso, mas espero que sirva de ajuda ou auxílio para você.</p>
<p>Obrigado por ler, e até o próximo post.</p>
<p>That&#39;s it!</p>
]]>
        </content:encoded>
      </item>
      <item>
        <title><![CDATA[Criando um Rest com Slim Framework em poucos minutos - parte 1]]></title>
        <description><![CDATA[O Slim é um framework em PHP, ele é leve e muito útil, e nós usaremos o Illuminate Database que é um ORM inteligente.]]></description>
        <link>http://expalmer.github.io/criando-um-rest-com-slim-framework-e-illuminate-database-em-poucos-minutos-parte-1/</link>
        <guid isPermaLink="true">http://expalmer.github.io/criando-um-rest-com-slim-framework-e-illuminate-database-em-poucos-minutos-parte-1/</guid>
        <category><![CDATA[php]]></category>
        <category><![CDATA[slimframework]]></category>
        <dc:creator><![CDATA[Palmer Oliveira]]></dc:creator>
        <pubDate>Sat, 22 Nov 2014 12:10:36 GMT</pubDate>
        <content:encoded>
          <![CDATA[<p>O <a href="http://slimframework.com/">Slim Framework</a> é um framework em PHP que uso praticamente em todos meus projetos em PHP, ele é leve e muito útil.</p>
<p>E juntamente com o Slim, eu uso o <a href="https://github.com/illuminate/database">Illuminate Database</a> que é um componente de ORM onde você não precisa gastar horas criando suas classes de banco de dados para consulta, relacionamento e tudo mais, ele abstrai toda essa parte.</p>
<p>Para ver o funcionamento do Slim, vamos criar uma API de cadastro de guitarras, só que neste post vamos primeiramente criar as rotas de leitura de nosso produto.</p>
<p>Nos posts seguintes, iremos criar o CRUD para deixar completo nosso Rest. Também veremos o funcionamento de um template engine e usaremos alguma lib javascript para fazer as ações no front-end.</p>
<h2 id="1-para-come-ar-criaremos-os-dados-">1) Para começar criaremos os dados!</h2>
<p>Crie 3 tabelas abaixo no MySql:</p>
<ul>
<li><strong>brands</strong>: Marca da guitarra.</li>
<li><strong>series</strong>: Modelo da Guitarra.</li>
<li><strong>guitars</strong>: A guitarra em sí, ela terá 2 chaves estrangeiras para ( <strong>brands</strong> e <strong>series</strong>).</li>
</ul>
<p>Alimente com esses dados:</p>
<pre><code class="lang-sql">
# brands
INSERT INTO brands (description, created_at, updated_at) VALUES
  (&#39;Gibson&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Fender&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Epiphone&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;PRS&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Ibanez&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Martin&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Taylor&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

# series
INSERT INTO series (description, created_at, updated_at) VALUES
  (&#39;Les Paul&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;SG&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;RD&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Flying V&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Firebird&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Statocaster&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Telecaster&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Jaguar&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Custom&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;Retro&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;DX&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (&#39;HD-28&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

# guitars
# informamos brand, serie e um nome para a guitarra
INSERT INTO series (fk_brands, fk_series, description, created_at, updated_at) VALUES
  (1, 1, &#39;Standart&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (1, 2, &#39;Pro&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (1, 3, &#39;Studio&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (2, 6, &#39;Standart&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (2, 7, &#39;Pro&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (2, 8, &#39;Studio&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (3, 1, &#39;Standart&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (3, 2, &#39;Pro&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (4, 9, &#39;Studio&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  (4, 9, &#39;Standart&#39;, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
</code></pre>
<h3 id="2-estrutura-de-arquivos-do-app">2 ) Estrutura de arquivos do APP</h3>
<pre><code class="lang-javascript">
slim-rest
├── app
│   ├── config
│   │   └── database.php
│   ├── controllers
│   │   └── appControllers.php
│   ├── helpers
│   │   └── appHelpers.php
│   ├── models
│   │   └── appModels.php
├── .htaccess
├── composer.json
└── index.php
</code></pre>
<p>Nós vamos instalar o Slim com o <a href="https://getcomposer.org/">Composer</a>, um gerenciador de dependências PHP. Se você não conhece ainda, essa é uma boa hora conhecer.</p>
<h3 id="3-composer-json">3) composer.json</h3>
<pre><code class="lang-javascript">{
  &quot;require&quot;: {
    &quot;slim/slim&quot;: &quot;2.4.3&quot;,
    &quot;illuminate/database&quot;: &quot;v4.2.9&quot;
  }
}
</code></pre>
<p>Vamos comentar as dependências.</p>
<ul>
<li><strong>slim/slim</strong>: Nosso framework.</li>
<li><strong>illuminate/database</strong>: Nosso ORM.</li>
</ul>
<h2 id="4-instalando-as-depend-ncias-com-composer-">4) Instalando as Dependências com Composer.</h2>
<p>Crie o diretório do nosso projeto que chamamos de <code>slim-rest</code> e dentro dela baixe o <code>composer</code> com o comando abaixo:</p>
<pre><code class="lang-bash">$ curl -sS https://getcomposer.org/installer | php
</code></pre>
<p>Esse comando vai baixar um arquivo chamado <code>composer.phar</code>, pois ele que vai fazer o trabalho de instalar suas dependências.</p>
<p>Ainda na raiz do diretório <code>slim-rest</code>, dê o comando para instalar as dependências.</p>
<pre><code class="lang-bash">$ php composer.phar install
</code></pre>
<p>O composer vai criar um diretório chamado <code>vendor</code> contendo todas as suas dependências.</p>
<p>Agora que baixou as dependências, vamos criar nossos arquivos.</p>
<h2 id="5-index-php">5) index.php</h2>
<p>Esse é nosso arquivo principal de entrada do APP.</p>
<pre><code class="lang-php">&lt;?php

# === constants
# ==================================================
define(&quot;_APP&quot;, dirname(__FILE__) . &#39;/app&#39;);

# === slim
# ==================================================
require &#39;vendor/autoload.php&#39;;
$app = new \Slim\Slim(array(
  &#39;debug&#39; =&gt; true
));

# === config
# ==================================================
require_once _APP . &#39;/config/database.php&#39;;

# === helpers
# ==================================================
require_once _APP . &#39;/helpers/appHelpers.php&#39;;

# === models
# ==================================================
require_once _APP . &quot;/models/appModels.php&quot;;

# === controllers
# ==================================================
require_once _APP . &quot;/controllers/appControllers.php&quot;;

# === run slim
$app-&gt;run();
</code></pre>
<h2 id="6-htaccess">6) .htaccess</h2>
<pre><code class="lang-bash">RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [QSA,L]
</code></pre>
<h2 id="7-app-config-database-php">7) app/config/database.php</h2>
<pre><code class="lang-php">
&lt;?php
// Database configuration
$settings = array(
  &#39;driver&#39;    =&gt; &#39;mysql&#39;,
  &#39;host&#39;      =&gt; &#39;localhost&#39;,
  &#39;database&#39;  =&gt; &#39;database&#39;,
  &#39;username&#39;  =&gt; &#39;user&#39;,
  &#39;password&#39;  =&gt; &#39;password&#39;,
  &#39;charset&#39;   =&gt; &#39;utf8&#39;,
  &#39;collation&#39; =&gt; &#39;utf8_unicode_ci&#39;,
  &#39;prefix&#39;    =&gt; &#39;&#39;
);

use Illuminate\Database\Capsule\Manager as Capsule;
$capsule = new Capsule;
$capsule-&gt;addConnection( $settings );
$capsule-&gt;bootEloquent();
</code></pre>
<h2 id="8-app-helpers-apphelpers-php">8) app/helpers/appHelpers.php</h2>
<p>Aqui criei um helper para dar output em json.</p>
<pre><code class="lang-php">&lt;?php
use Slim\Slim;

class helpers {

  static function jsonResponse( $error = true, $message = &#39;&#39;, $data = array() ) {

    $app               = Slim::getInstance();
    $response          = new stdClass();
    $response-&gt;error   = $error;
    $response-&gt;message = $message;
    $response-&gt;data    = $data;

    $app-&gt;response()-&gt;header(&#39;Content-Type&#39;, &#39;application/json&#39;);
    return $app-&gt;response()-&gt;body( json_encode($response) );

  }

}
</code></pre>
<h2 id="9-app-models-appmodels-php">9) app/models/appModels.php</h2>
<p>Aqui é onde o <strong>Illuminate</strong> reconhece nossas classes de Model, apenas crie uma classe com extends nele, informe o nome da tabela e pronto. Cara, ele é muito útil e possui muitos outros recursos que fará você ganhar tempo em seus projetos.</p>
<p>Para saber como usar mais recursos do  <strong>Illuminate</strong>, olhe a documentação no <a href="http://laravel.com/docs/4.2/eloquent">site do Laravel</a>, pois ele usa esse component também.</p>
<pre><code class="lang-php">&lt;?php

class Brands extends Illuminate\Database\Eloquent\Model
{
  protected $table = &#39;brands&#39;;
}

class Series extends Illuminate\Database\Eloquent\Model
{
  protected $table = &#39;series&#39;;
}

class Guitars extends Illuminate\Database\Eloquent\Model
{
  protected $table = &#39;guitars&#39;;

  public function Brand() {
    return $this-&gt;hasOne(&#39;Brands&#39;,&#39;id&#39;, &#39;fk_brands&#39;);
  }

  public function Serie() {
    return $this-&gt;hasOne(&#39;Series&#39;,&#39;id&#39;, &#39;fk_series&#39;);
  }
}
</code></pre>
<h2 id="10-app-controllers-appcontrollers-php">10) app/controllers/appControllers.php</h2>
<pre><code class="lang-php">&lt;?php

# === api
# ==================================================
$app-&gt;get(&#39;/api/v1/brands&#39;, function() use ($app) {

  $results = Brands::all();
  return helpers::jsonResponse(false, &#39;results&#39;, $results );

});

$app-&gt;get(&#39;/api/v1/series&#39;, function() use ($app) {

  $results = Series::all();
  return helpers::jsonResponse(false, &#39;results&#39;, $results );

});

$app-&gt;get(&#39;/api/v1/guitars&#39;, function() use ($app) {

  $results = [];
  $description = $app-&gt;request-&gt;get(&#39;description&#39;);
  if ( $description ) {
    $results = Guitars::with(&#39;Brand&#39;)
                      -&gt;with(&#39;Serie&#39;)
                      -&gt;where(&#39;description&#39;,&#39;LIKE&#39;,&quot;%{$description}%&quot;)
                      -&gt;get();
  } else {
    $results = Guitars::with(&#39;Brand&#39;)
                      -&gt;with(&#39;Serie&#39;)
                      -&gt;get();
  }
  $message = $results-&gt;count() . &#39; results&#39;;
  return helpers::jsonResponse(false, $message, $results );

});
</code></pre>
<p>Pronto!!!</p>
<p>Agora abra seu browser no endereço do seu APP, no meu caso é <code>http://localhost/slim-rest/</code>, então as rotas ficaram assim:</p>
<ul>
<li><code>http://localhost/slim-rest/api/v1/brands</code>: As marcas.</li>
<li><code>http://localhost/slim-rest/api/v1/series</code>: Os modelos.</li>
<li><code>http://localhost/slim-rest/api/v1/guitars</code>: As guitarras com sua respectiva marca e modelo.</li>
</ul>
<p>Temos também uma pequena busca no campo <code>description</code> na rota guitars, testa assim: <code>http://localhost/slim-rest/api/v1/guitars?description=a</code>.</p>
<p>Então isso é só o começo, podemos criar muitas coisas em cima disso.</p>
<p>Não expliquei detalhadamente cada arquivo, mas se você tiver alguma dúvida pode me perguntar que terei o prazer em ajuda-lo. Caso tenha alguma dica de melhoria, será bem vinda!</p>
<p>Concluindo, o <code>Slim</code> é muito bacana pois em minutos você levanta uma aplicação bem organizada, rápida e segura. Note que usamos o <code>Illuminate</code> para pegar os dados do banco, inclusive com join e outras tabelas, e tudo isso de uma forma simples.</p>
<p>Com pouco código já temos nosso Rest definido!</p>
<p>Obrigado por ler, e até o próximo post.</p>
<p>That&#39;s it!</p>
]]>
        </content:encoded>
      </item>
      <item>
        <title><![CDATA[Criando um Blog Estático com Metalsmith contendo tags, gists, drafts e um rss feed]]></title>
        <description><![CDATA[Dessa vez vamos criar novamente um blog estático, mas agora contendo tags, gists, drafts e rss feed]]></description>
        <link>http://expalmer.github.io/criando-um-blog-estatico-com-metalsmith-contendo-tags-gists-drafts-e-um-rss-feed/</link>
        <guid isPermaLink="true">http://expalmer.github.io/criando-um-blog-estatico-com-metalsmith-contendo-tags-gists-drafts-e-um-rss-feed/</guid>
        <category><![CDATA[metalsmith]]></category>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[nodejs]]></category>
        <dc:creator><![CDATA[Palmer Oliveira]]></dc:creator>
        <pubDate>Mon, 20 Oct 2014 15:39:06 GMT</pubDate>
        <content:encoded>
          <![CDATA[<h2 id="vamos-complementar-nosso-blog-feito-em-metalsmith-http-metalsmith-io-com-as-features-tags-gist-drafts-e-um-rss-feed-">Vamos complementar nosso blog feito em <a href="http://metalsmith.io/">Metalsmith</a> com as features <code>tags</code>, <code>gist</code>, <code>drafts</code> e um <code>rss feed</code>.</h2>
<p>Lembra dos plugins que mencionei no post passado? Pois é, o de <code>tags</code> <a href="https://github.com/totocaster/metalsmith-tags">metalsmith-tags</a> eu contribui, e o plugin de <code>gist</code> <a href="https://github.com/expalmer/metalsmith-gist">metalsmith-gist</a> eu criei, e esses que usaremos aqui :).</p>
<p>O plugin <code>drafts</code> é para rascunhos, você cria seus posts, mas eles não serão gerados na pasta<code>build</code>.</p>
<p>O <code>rss feed</code> fiz do meu jeito, mas recentemente criaram um plugin pra isso <a href="https://github.com/hurrymaplelad/metalsmith-feed">metalsmith-feed</a>. Depois dê uma olhada!</p>
<p>Antes de postar os arquivos, queria te dar uma dica dessa <strong>lib</strong> muito legal chamada <a href="http://simbco.github.io/httpster/">httpster</a>.
Use ela para levantar um server <code>nodejs</code> em qualquer diretório que quiser.</p>
<p>Instale globalmente em sua máquina <code>npm -g install httpster</code>, depois entre na pasta desejada ( no nosso caso, entre na pasta <code>build</code> ) e dê o comando <code>httpster</code> então será levantado um servidor em <code>http://localhost:3333/</code>.
É mágico! Estou usando direto para abrir meus projetos locais.</p>
<h3 id="1-estrutura-de-arquivos-do-blog-">1 ) Estrutura de arquivos do Blog.</h3>
<pre><code class="lang-javascript">- blog
---- index.js
---- package.json
---- src
-------- index.md
-------- rss.xml
-------- posts
-------------- post-1.md
-------------- post-2.md
-------------- post-3.md
-------------- post-4.md
---- templates
-------------- partials
----------------------- footer.hbt
----------------------- header.hbt
-------------- index.hbt
-------------- posts.hbt
-------------- rss.hbt
-------------- tags.hbt
</code></pre>
<h3 id="2-package-json">2) package.json</h3>
<pre><code class="lang-javascript">{
  &quot;name&quot;: &quot;blog&quot;,
  &quot;description&quot;: &quot;meu blog legal&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot;: {
    &quot;handlebars&quot;: &quot;^2.0.0&quot;,
    &quot;metalsmith&quot;: &quot;^0.11.0&quot;,
    &quot;metalsmith-collections&quot;: &quot;^0.6.0&quot;,
    &quot;metalsmith-drafts&quot;: &quot;0.0.1&quot;,
    &quot;metalsmith-gist&quot;: &quot;^0.3.0&quot;,
    &quot;metalsmith-markdown&quot;: &quot;^0.2.1&quot;,
    &quot;metalsmith-permalinks&quot;: &quot;^0.4.0&quot;,
    &quot;metalsmith-tags&quot;: &quot;^0.6.1&quot;,
    &quot;metalsmith-templates&quot;: &quot;^0.5.2&quot;,
    &quot;metasmith&quot;: &quot;0.0.1&quot;,
    &quot;moment&quot;: &quot;^2.8.3&quot;
  }
}
</code></pre>
<p>Vamos comentar as dependências novamente.</p>
<ul>
<li><strong>metalsmith-drafts</strong>: Criar arquivos do tipo rascunho.</li>
<li><strong>metalsmith-collections</strong>: Cria um objeto chamado <code>collections</code> com todos os posts.</li>
<li><strong>metalsmith-markdown</strong>: Interpreta nossos arquivos <code>.md</code>.</li>
<li><strong>metalsmith-permalinks</strong>: Muda o nome original do arquivo para uma url amigável.</li>
<li><strong>metalsmith-gist</strong>: Pega gists do github e inclui na página.</li>
<li><strong>metalsmith-tags</strong>: Cria páginas conforme as tags informadas.</li>
<li><strong>metalsmith-templates</strong>: Permite usar um template engine.</li>
<li><strong>handlebars</strong>: Nosso template engine.</li>
<li><strong>moment</strong>: Para manipular datas.</li>
</ul>
<p>Instale as dependências. Dê o comando na raiz do diretório <code>blog</code>.</p>
<pre><code class="lang-javascript">$ npm install
</code></pre>
<h2 id="vou-come-ar-pelo-arquivo-index-js-porque-precisamos-criar-alguns-handlebars-helpers-">Vou começar pelo arquivo <code>index.js</code>, porque precisamos criar alguns Handlebars helpers.</h2>
<p>Precisaremos criar helpers para <strong>partials</strong> e <strong>formatação de datas</strong>. Note que criei esses 3 helpers que usaremos em nossos templates.
Usarei também o plugin <a href="http://momentjs.com/">moment</a> para manipular datas.</p>
<h3 id="3-index-js">3) index.js</h3>
<pre><code class="lang-javascript">
var Metalsmith   = require(&#39;metalsmith&#39;);
var collections  = require(&#39;metalsmith-collections&#39;);
var markdown     = require(&#39;metalsmith-markdown&#39;);
var templates    = require(&#39;metalsmith-templates&#39;);
var permalinks   = require(&#39;metalsmith-permalinks&#39;);
var tags         = require(&#39;metalsmith-tags&#39;);
var gist         = require(&#39;metalsmith-gist&#39;);
var drafts       = require(&#39;metalsmith-drafts&#39;);

var fs           = require(&#39;fs&#39;);
var Handlebars   = require(&#39;handlebars&#39;);
var moment       = require(&#39;moment&#39;);

// Handlebars Helpers
Handlebars.registerPartial({
  &#39;header&#39;: fs.readFileSync(&#39;./templates/partials/header.hbt&#39;).toString(),
  &#39;footer&#39;: fs.readFileSync(&#39;./templates/partials/footer.hbt&#39;).toString()
});
Handlebars.registerHelper(&#39;dateFormat&#39;, function( context ) {
  return moment(context).format(&quot;LL&quot;);
});
Handlebars.registerHelper(&#39;dateGMT&#39;, function( context ) {
  context = context === &#39;new&#39; ? new Date() : context;
  return context.toGMTString();
});

Metalsmith(__dirname)
  .use(drafts())                 // páginas com atributo &#39;draft: true&#39; não serão geradas.
  .use(collections({             // nos dará acesso a um objeto chamado &#39;collections&#39; ...
      posts: {                   // ... com todos os posts
          pattern: &#39;posts/*.md&#39;, // aqui é o lugar onde estão nossos posts
          sortBy: &#39;date&#39;,        // ordenar por data
          reverse: true          // ordenar da data mais recente para a mais antiga
      }
  }))
  .use(markdown())        // vai ler todos arquivos .md e transformar em um objeto
  .use(permalinks({       // vai mudar o arquivo destino no padrão {title}/index.html
      pattern: &#39;:title&#39;,
      relative: false
  }))
  .use(gist()) // adiciona gists nas páginas desejadas.
  .use(tags({  // criará páginas conforme as tags informadas
    handle: &#39;tags&#39;,
    template:&#39;tags.hbt&#39;,
    path:&#39;tags&#39;,
    sortBy: &#39;title&#39;,
    reverse: true
  }))
  .use(templates(&#39;handlebars&#39;)) // nossos objetos serão passados para o handlebars
  .destination(&#39;./build&#39;)       // diretório destino
  .build(function(err, files) { // escreve os aquivos no diretório build
    if (err) { throw err; }     // um handler de erro, sempre é bom
  });
</code></pre>
<h2 id="p-ginas-do-blog">Páginas do Blog</h2>
<h3 id="4-src-index-md">4) src/index.md</h3>
<pre><code class="lang-javascript">---
template: index.hbt
---

Bem vindo ao meu blog! Confira abaixo meus **posts**.
</code></pre>
<h3 id="5-src-posts-post-1-md">5) src/posts/post-1.md</h3>
<p>Aqui temos campos novos como <code>date, description, author e tags</code>.</p>
<pre><code class="lang-javascript">---
title: Meu Primeiro Post com Metalsmith
template: posts.hbt
date: 2014-03-01
description: Como criar um post com Metalsmith. Para o RSS Feed.
author: Palmer. Para o RSS Feed.
tags: metalsmith, nodejs, javascript
---

## Aprendendo a usar o [Metalsmith](http://metalsmith.io).

### Porque usar Metalsmith ?

- É fácil.
- Divertido.
- É em javascript.
- Eu curti.
</code></pre>
<h3 id="6-src-posts-post-2-md">6) src/posts/post-2.md</h3>
<p>Neste arquivo colocamos um bloco de código markdown.</p>
<pre><code class="lang-javascript">---
title: Meu Segundo Post sobre MEAN
template: posts.hbt
date: 2014-03-01
description: Use MEAN facilmente. Para o RSS Feed.
author: Palmer. Para o RSS Feed.
tags: mongodb, express, angular, nodejs, javascript
---

## Aprenda a usar uma solução fullstack de javascript

### Porque usar MEAN ?

- Porque você usa um única linguagem.
- Divertido.
- É em javascript.
- Eu curti.

  ```javascript

  // server.js

  ...

  app.configure(function() {

    // set up our express application
    app.use(express.logger(&#39;dev&#39;));
    app.use(express.cookieParser());
    app.use(express.bodyParser());

    app.set(&#39;view engine&#39;, &#39;ejs&#39;);

    // required for passport
    app.use(express.session({ secret: &#39;mysecret&#39; }));
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(flash());

  });

  ...

  ```\aqui são só 3 as aspas, então retire esse comentário
</code></pre>
<h3 id="7-src-posts-post-3-md">7) src/posts/post-3.md</h3>
<p>Esse é nosso post do tipo <strong>rascunho</strong>, note o campo <code>draft: true</code>, ou seja, esse post não será gerado na pasta <code>build</code>.</p>
<pre><code class="lang-javascript">  ---
  title: Um Post que ainda não está pronto, portanto fica em draft
  draft: true
  template: posts.hbt
  date: 2014-10-20
  description: Post Não Pronto. Para o RSS Feed.
  author: Palmer. Para o RSS Feed.
  tags: nodejs
  ---

  ## Rest com NodeJS

  ### Porque usar Node ?

  Tenho que ver o que escrever ainda.
</code></pre>
<h3 id="8-src-posts-post-4-md">8) src/posts/post-4.md</h3>
<p>Neste arquivo estamos usando o plugin <strong>metalsmith-gist</strong>, você informa o usuário e o nome da hash do gist <code>gist: expalmer/43952d905d75693dea0c</code>, e depois referencia ele no corpo do post.
Nesse exemplo o gist original é esse <a href="https://gist.github.com/expalmer/43952d905d75693dea0c">https://gist.github.com/expalmer/43952d905d75693dea0c</a>.</p>
<pre><code class="lang-javascript">  ---
  title: Um Post de React com um Gist do Github
  template: posts.hbt
  date: 2014-10-19
  description: Usando um Gist de React. Para o RSS Feed.
  author: Palmer. Para o RSS Feed.
  tags: react, javascript
  gist: expalmer/43952d905d75693dea0c
  ---

  ## Começando com [React](http://facebook.github.io/react/).

  ### Porque usar React ?

  - É rápido.
  - É organizado e modularizado.
  - É em javascript.
  - Eu curti.

  Vamos começar então.

  gist:expalmer/43952d905d75693dea0c
</code></pre>
<h3 id="9-src-rss-xml">9) src/rss.xml</h3>
<p>Essa página irá somente conter os dados para o <code>rss</code>. Aqui eu coloquei <code>base:http://localhost:3333</code> mas depois você deve colocar um endereço certinho, no caso o do seu blog.</p>
<pre><code class="lang-javascript">  ---
  template: rss.hbt
  untemplatized: 1
  base: http://localhost:3333
  name: Palmer Oliveira
  title: Meu Blog
  description: Um Blog Sobre Deselvolvimento Web
  image: http://localhost:3333/myImage.jpg
  ---
</code></pre>
<h2 id="vamos-agora-para-os-templates-">Vamos agora para os <strong>Templates</strong>.</h2>
<h3 id="10-templates-index-hbt">10) templates/index.hbt</h3>
<p>Aqui aplicamos nosso helper de <code>partials</code> com o header e o footer.</p>
<pre><code class="lang-markup">  {{&gt; header}}
    &lt;section&gt;
      {{{contents}}}
    &lt;/section&gt;
    &lt;section&gt;
      &lt;h1&gt;Lista dos Posts&lt;/h1&gt;
      &lt;ul&gt;
        {{#each collections.posts }}
          &lt;li&gt;
            &lt;a href=&quot;{{this.path}}/index.html&quot; title=&quot;{{this.title}}&quot;&gt;
              &lt;h2&gt;{{this.title}}&lt;/h2&gt;
              &lt;time datetime=&quot;{{ dateFormat this.date }}&quot;&gt;{{ dateFormat this.date }}&lt;/time&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        {{/each}}
      &lt;/ul&gt;
    &lt;/section&gt;
  {{&gt; footer}}
</code></pre>
<h3 id="11-templates-partials-header-hbt">11) templates/partials/header.hbt</h3>
<pre><code class="lang-markup">  &lt;!DOCTYPE html&gt;
  &lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Meu Blog&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header&gt;
      &lt;h1&gt;Meu Blog&lt;/h1&gt;
      &lt;p&gt;Assine nosso &lt;a href=&quot;/rss.xml&quot;&gt;rss&lt;/a&gt;.&lt;/p&gt;
    &lt;/header&gt;
</code></pre>
<h3 id="12-templates-partials-footer-hbt">12) templates/partials/footer.hbt</h3>
<pre><code class="lang-markup">      &lt;footer&gt;
        made with &lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;metalsmith&lt;/a&gt;
      &lt;/footer&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</code></pre>
<h3 id="13-templates-posts-hbt">13) templates/posts.hbt</h3>
<p>Aqui usaremos também nosso <code>partials</code> e a função para <code>formatação de datas</code>. Note também que temos acesso as <code>tags</code> informadas no corpo dos posts, então podemos dar um <strong>each</strong> neles.</p>
<pre><code class="lang-markup">  {{&gt; header}}
    &lt;section&gt;
      &lt;a href=&quot;/&quot;&gt;Voltar para o Index&lt;/a&gt;
    &lt;/section&gt;
    &lt;article&gt;
      &lt;h1&gt;{{this.title}}&lt;/h1&gt;
      &lt;time datetime=&quot;{{ dateFormat this.date }}&quot;&gt;{{ dateFormat this.date }}&lt;/time&gt;
      &lt;ul class=&quot;post__tags&quot;&gt;
        {{#each this.tags }}
          &lt;li&gt;
            &lt;a href=&quot;/tags/{{this}}.html&quot; title=&quot;Posts sobre {{this}}&quot;&gt;{{this}}&lt;/a&gt;
          &lt;/li&gt;
        {{/each}}
      &lt;/ul&gt;
      &lt;div class=&quot;post__body&quot;&gt;
        {{{contents}}}
      &lt;/div&gt;
    &lt;/article&gt;
  {{&gt; footer}}
</code></pre>
<h3 id="14-templates-tags-hbt">14) templates/tags.hbt</h3>
<p>Aqui é o template usado pelo plugin de <code>tags</code>.</p>
<pre><code class="lang-markup">  {{&gt; header}}
    &lt;section&gt;
      &lt;a href=&quot;/&quot;&gt;Voltar para o Index&lt;/a&gt;
    &lt;/section&gt;
    &lt;section&gt;
      &lt;h1&gt;Tag: &lt;strong&gt;{{tag}}&lt;/strong&gt;&lt;/h1&gt;
      &lt;ul&gt;
      {{#each posts }}
        &lt;li&gt;
            &lt;a href=&quot;/{{this.path}}/index.html&quot; title=&quot;{{this.title}}&quot;&gt;
              &lt;h2&gt;{{this.title}}&lt;/h2&gt;
              &lt;time datetime=&quot;{{ dateFormat this.date }}&quot;&gt;{{ dateFormat this.date }}&lt;/time&gt;
            &lt;/a&gt;
          &lt;/li&gt;
      {{/each}}
      &lt;/ul&gt;
    &lt;/section&gt;
  {{&gt; footer}}
</code></pre>
<h3 id="15-templates-rss-hbt">15) templates/rss.hbt</h3>
<p>Aqui é o template usado pela página <code>src/rss.xml</code> para criar nosso <strong>rss feed</strong>.</p>
<pre><code class="lang-markup">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
  &lt;rss xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:content=&quot;http://purl.org/rss/1.0/modules/content/&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; version=&quot;2.0&quot; xmlns:geo=&quot;http://www.w3.org/2003/01/geo/wgs84_pos#&quot;&gt;
    &lt;channel&gt;
      &lt;title&gt;&lt;![CDATA[{{this.title}}]]&gt;&lt;/title&gt;
      &lt;atom:link href=&quot;{{this.base}}/rss.xml&quot; rel=&quot;self&quot; type=&quot;application/rss+xml&quot;/&gt;
      &lt;link&gt;{{this.base}}&lt;/link&gt;
      &lt;description&gt;&lt;![CDATA[{{this.description}}]]&gt;&lt;/description&gt;
      &lt;image&gt;
        &lt;url&gt;{{this.image}}&lt;/url&gt;
        &lt;title&gt;{{this.title}}&lt;/title&gt;
        &lt;link&gt;{{this.base}}&lt;/link&gt;
      &lt;/image&gt;
      &lt;pubDate&gt;{{dateGMT &#39;new&#39;}}&lt;/pubDate&gt;
      &lt;lastBuildDate&gt;{{dateGMT &#39;new&#39;}}&lt;/lastBuildDate&gt;
      &lt;language&gt;en-US&lt;/language&gt;
      &lt;generator&gt;Metalsmith custom plugin&lt;/generator&gt;
      &lt;ttl&gt;60&lt;/ttl&gt;
      {{#each collections.posts }}
      &lt;item&gt;
        &lt;title&gt;&lt;![CDATA[{{this.title}}]]&gt;&lt;/title&gt;
        &lt;description&gt;&lt;![CDATA[{{this.description}}]]&gt;&lt;/description&gt;
        &lt;link&gt;{{../this.base}}/{{this.path}}/&lt;/link&gt;
        &lt;guid isPermaLink=&quot;true&quot;&gt;{{../this.base}}/{{this.path}}/&lt;/guid&gt;
        {{#each this.tags }}
        &lt;category&gt;&lt;![CDATA[{{this}}]]&gt;&lt;/category&gt;
        {{/each}}
        &lt;dc:creator&gt;&lt;![CDATA[{{this.author}}]]&gt;&lt;/dc:creator&gt;
        &lt;pubDate&gt;{{dateGMT this.date}}&lt;/pubDate&gt;
        &lt;content:encoded&gt;
          &lt;![CDATA[{{{contents}}}]]&gt;
        &lt;/content:encoded&gt;
      &lt;/item&gt;
      {{/each}}
    &lt;/channel&gt;
  &lt;/rss&gt;
</code></pre>
<h3 id="16-src-css-style-css">16) src/css/style.css</h3>
<p>Vamos colocar um estilo.</p>
<pre><code class="lang-css">* {
  padding: 0;
  margin: 0;
}
body {
  margin: 30px auto;
  max-width: 600px;
  text-align: center;
  font-size: 100%;
  font-family: &#39;Georgia&#39;, &#39;Arial&#39;, serif;
  color: #111;
  background: #fff;
}

a {
  color: #999;
}
a:hover {
  color: #FF0050;
}

header,
section,
article,
footer {
  margin-top: -1px;
  padding: 20px;
  border: solid 1px #eee;
}

ul li {
  list-style: none;
  margin: 20px 0;
}

ul li a {
  display: inline-block;
  margin: 5px;
  color: #FF0050;
}

ul li a:hover { color: #FF578B; }

section h1 {
  font-size: 2em;
}

time {
  display: inline-block;
  padding: 2px 4px;
}

.post__tags li {
  display: inline-block;
}
.post__tags li a {
  display: inline-block;
  margin: 5px 0;
  padding: 3px 6px;
  color: #fff;
  background: #222;
  text-decoration: none;
  border-radius: 5px;
  border: solid 1px #000;
}
.post__tags li a:hover {
  color: #fff;
  background: #FF0050;
}

.post__body {
  margin: 20px 0;
  padding: 20px 0;
  text-align: left;
  border-top: solid 1px #eee;
}
.post__body h2, .post__body h3 {
  margin: 10px 0;
}
.post__body ul {
  padding-left: 40px;
}
.post__body ul li {
  list-style: square;
}
.post__body p {
  margin: 1rem 0;
  font-size: 1em;
  line-height: 1.7;
}
pre {
  padding: 20px;
  background: #313430;
  color: #64FA0F;
  border-radius: 4px;
}
</code></pre>
<h3 id="17-finalmente-execute-o-comando-na-raiz-do-diret-rio-blog-">17) Finalmente execute o comando na raiz do diretório <code>blog</code>:</h3>
<pre><code class="lang-javascript">$ node index.js
</code></pre>
<p>Lembra da dica? Vá até a pasta <code>build</code> e dê o comando <code>httpster</code>, então abra o browser em <code>http://localhost:3333/</code>. Confere lá como ficou.</p>
<p>O post ficou meio longo eu sei, mas usando essa base, você pode criar seu blog com várias features bacanas.</p>
<p>Neste blog eu uso mais alguns plugins como <code>metalsmith-concat</code>, <code>metalsmith-clean-css</code>, <code>metalsmith-uglify</code>, <code>metalsmith-html-minifier</code>, claro que você pode usar um <code>grunt</code> ou <code>gulp</code> da vida pra isso.</p>
<p>Se tiver alguma dúvida, ficarei feliz em ajuda-lo!</p>
<p>Espero que tenham gostado. That&#39;s it !</p>
]]>
        </content:encoded>
      </item>
      <item>
        <title><![CDATA[Metalsmith, um extremamente simples gerador de páginas estáticas feito em javascript]]></title>
        <description><![CDATA[Tomei coragem e resolvi criar meu blog, e escolhi o Metalsmith por ser em javascript, minha linguagem favorita.]]></description>
        <link>http://expalmer.github.io/metalsmith-um-extremamente-simples-gerador-de-paginas-estaticas-feito-em-javascript/</link>
        <guid isPermaLink="true">http://expalmer.github.io/metalsmith-um-extremamente-simples-gerador-de-paginas-estaticas-feito-em-javascript/</guid>
        <category><![CDATA[metalsmith]]></category>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[nodejs]]></category>
        <dc:creator><![CDATA[Palmer Oliveira]]></dc:creator>
        <pubDate>Wed, 24 Sep 2014 17:39:06 GMT</pubDate>
        <content:encoded>
          <![CDATA[<h2 id="resolvi-criar-meu-blog-e-escolhi-o-metalsmith-por-ser-em-javascript-minha-linguagem-favorita-">Resolvi criar meu blog e escolhi o Metalsmith por ser em javascript, minha linguagem favorita.</h2>
<p>Hoje existem alguns geradores de sites estáticos super legais, como o <a href="http://jekyllrb.com/">jekyll</a>,
mas resolvi procurar algo feito em javascript e encontrei o <a href="http://metalsmith.io/">Metalsmith</a> criado pela turma do <a href="https://segment.io/">Segment.io</a>.</p>
<p>Vale lembrar que temos outro gerador em javascript muito bacana, o <a href="https://github.com/es6rocks/harmonic">harmonic</a> feito pelo <a href="https://twitter.com/jaydson">@jaydson</a>.
Logo vou me aventurar no harmonic.</p>
<h2 id="como-o-metalsmith-funciona-">Como o Metalsmith funciona ?</h2>
<p>O Metalsmith roda com <code>nodejs</code>, então já sabe que precisa de node na sua máquina.</p>
<p>Toda lógica do Metalsmith é manipulada através de plugins, ou seja, você simplesmente chama métodos encadeados e pronto!</p>
<p>O Metalsmith faz 3 coisinhas:</p>
<ol>
<li>Lê todos os arquivos no diretório origem <code>src</code>.</li>
<li>Chama os cada um dos métodos encadeados manipulando os arquivos.</li>
<li>Escreve o resultado no diretótio destino <code>build</code>. ( Você escolhe o nome da pasta destino ).</li>
</ol>
<h2 id="vamos-criar-um-pequeno-blog-com-metalsmith-">Vamos criar um pequeno blog com Metalsmith.</h2>
<h3 id="1-estrutura-de-arquivos-do-blog-">1 ) Estrutura de arquivos do Blog.</h3>
<pre><code class="lang-javascript">- blog
---- index.js
---- package.json
---- src
-------- index.md
-------- posts
-------------- post-1.md
-------------- post-2.md
---- templates
-------------- index.hbt
-------------- posts.hbt
</code></pre>
<h3 id="2-package-json">2) package.json</h3>
<pre><code class="lang-javascript">{
  &quot;name&quot;: &quot;blog&quot;,
  &quot;description&quot;: &quot;meu blog legal&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot;: {
    &quot;handlebars&quot;: &quot;^2.0.0&quot;,
    &quot;metalsmith&quot;: &quot;^0.11.0&quot;,
    &quot;metalsmith-collections&quot;: &quot;^0.6.0&quot;,
    &quot;metalsmith-markdown&quot;: &quot;^0.2.1&quot;,
    &quot;metalsmith-permalinks&quot;: &quot;^0.4.0&quot;,
    &quot;metalsmith-templates&quot;: &quot;^0.5.2&quot;,
    &quot;metasmith&quot;: &quot;0.0.1&quot;
  }
}
</code></pre>
<p>Vamos instalar o Metalsmith e mais 5 dependências essenciais para um blog bacana.</p>
<ul>
<li><strong>metalsmith-collections</strong>: Cria um objeto chamado <code>collections</code> com todos os posts.</li>
<li><strong>metalsmith-markdown</strong>: Interpreta nossos arquivos <code>.md</code>.</li>
<li><strong>metalsmith-permalinks</strong>: Muda o nome original do arquivo para uma url amigável.</li>
<li><strong>metalsmith-templates</strong>: Permite usar um template engine.</li>
<li><strong>handlebars</strong>: Nosso template engine.</li>
</ul>
<p>Aproveite e já instale as dependências. Dê o comando na raiz do diretório <code>blog</code>.</p>
<pre><code class="lang-javascript">$ npm install
</code></pre>
<h2 id="agora-vamos-criar-as-nossas-p-ginas-de-fato-">Agora vamos criar as nossas páginas de fato.</h2>
<h3 id="3-blog-src-index-md">3) blog/src/index.md</h3>
<pre><code class="lang-javascript">---
template: index.hbt
---

Corpo da página index
</code></pre>
<h3 id="4-blog-src-posts-post-1-md">4) blog/src/posts/post-1.md</h3>
<pre><code class="lang-javascript">---
title: Meu Primeiro Post com Metalsmith
template: posts.hbt
---

Corpo do Post 1
</code></pre>
<h3 id="5-blog-src-posts-post-2-md">5) blog/src/posts/post-2.md</h3>
<pre><code class="lang-javascript">---
title: Meu Segundo Post
template: posts.hbt
---

Corpo do Post 2
</code></pre>
<h2 id="agora-criaremos-nossos-templates-em-handlebars-">Agora criaremos nossos templates em handlebars.</h2>
<h3 id="6-blog-templates-index-hbt">6) blog/templates/index.hbt</h3>
<pre><code class="lang-markup">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Blog Index&lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;header&gt;
    &lt;h1&gt;Index&lt;/h1&gt;
  &lt;/header&gt;
  &lt;section&gt;
    {{{contents}}}
  &lt;/section&gt;
  &lt;section&gt;
    &lt;h2&gt;Lista dos Posts&lt;/h2&gt;
    &lt;ul&gt;
      {{#each collections.posts }}
        &lt;li&gt;
          &lt;a href=&quot;{{this.path}}/index.html&quot; title=&quot;{{this.path}}&quot;&gt;{{this.title}}&lt;/a&gt;
        &lt;/li&gt;
      {{/each}}
    &lt;/ul&gt;
  &lt;/section&gt;
  &lt;footer&gt;
    made with &lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;metalsmith&lt;/a&gt;
  &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="7-blog-templates-posts-hbt">7) blog/templates/posts.hbt</h3>
<pre><code class="lang-markup">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Blog Posts&lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;header&gt;
    &lt;a href=&quot;../index.html&quot;&gt;Voltar para o Index&lt;/a&gt;
  &lt;/header&gt;
  &lt;article&gt;
    &lt;h1&gt;{{this.title}}&lt;/h1&gt;
    {{{contents}}}
  &lt;/article&gt;
  &lt;footer&gt;
    made with &lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;metalsmith&lt;/a&gt;
  &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="vamos-dar-um-estilo-">Vamos dar um estilo.</h2>
<h3 id="8-blog-src-css-style-css">8) blog/src/css/style.css</h3>
<pre><code class="lang-css">* {
  padding: 0;
  margin: 0;
}
body {
  margin: 30px auto;
  max-width: 600px;
  text-align: center;
  font-size: 100%;
  font-family: &#39;Georgia&#39;, &#39;Arial&#39;, serif;
  color: #111;
  background: #fff;
}

a {
  color: #999;
}

header,
section,
article,
footer {
  margin-top: -1px;
  padding: 20px;
  border: solid 1px #eee;
}

ul li {
  list-style: none;
}

ul li a {
  display: inline-block;
  margin: 5px;
  color: #FF0050;
}
</code></pre>
<h2 id="agora-s-criar-nosso-arquivo-principal-chamando-o-metalsmith-">Agora é só criar nosso arquivo principal chamando o Metalsmith.</h2>
<h3 id="9-blog-index-js">9) blog/index.js</h3>
<pre><code class="lang-javascript">var Metalsmith   = require(&#39;metalsmith&#39;);
var collections  = require(&#39;metalsmith-collections&#39;);
var markdown     = require(&#39;metalsmith-markdown&#39;);
var templates    = require(&#39;metalsmith-templates&#39;);
var permalinks   = require(&#39;metalsmith-permalinks&#39;);

Metalsmith(__dirname)
  .use(collections({             // nos dará acesso a um objeto chamado &#39;collections&#39; ...
      posts: {                   // ... com todos os posts
          pattern: &#39;posts/*.md&#39;, // aqui é o lugar onde estão nossos posts
          sortBy: &#39;date&#39;,        // ordenar por data
          reverse: true          // ordenar da data mais recente para a mais antiga
      }
  }))
  .use(markdown())        // vai ler todos arquivos .md e transformar em um objeto
  .use(permalinks({       // vai mudar o arquivo destino no padrão {title}/index.html
      pattern: &#39;:title&#39;,
      relative: false
  }))
  .use(templates(&#39;handlebars&#39;)) // nossos objetos serão passados para o handlebars
  .destination(&#39;./build&#39;)       // diretório destino
  .build(function(err, files) { // escreve os aquivos no diretório build
    if (err) { throw err; }     // um handler de erro, sempre é bom
  });
</code></pre>
<h3 id="9-finalmente-execute-o-comando-na-raiz-do-diret-rio-blog-">9) Finalmente execute o comando na raiz do diretório <code>blog</code>:</h3>
<pre><code class="lang-javascript">$ node index.js
</code></pre>
<h3 id="10-v-at-o-diret-rio-build-e-abra-o-arquivo-index-html-no-seu-browser-favorito-e-est-pronto-">10) Vá até o diretório <code>build</code> e abra o arquivo <code>index.html</code> no seu browser favorito, e está pronto!</h3>
<p>Em resumo, o Metalsmith vai ler a pasta <code>src</code> criar um nova pasta chamada <code>build</code> com o resultado de tudo feito pelos plugins.</p>
<p>Eu não expliquei detalhe por detalhe, mas sei que você só fazendo esse exemplo vai sacar como as coisas funcionam.</p>
<p>Aconselho a dar uma olhada no código de algum plugin, e veja como é fácil criar coisas no Metalsmith. Eu inclusive contribui para o plugin <a href="https://github.com/totocaster/metalsmith-tags">metalsmith-tags</a> e criei outro para colocar <code>gists</code> dentro do blog <a href="https://github.com/expalmer/metalsmith-gist">metalsmith-gist</a>.</p>
<p>Logo irei fazer um novo post com a estrutura completa de um blog e criando plugins no Metalsmith.</p>
<p>Espero que tenham gostado. That&#39;s it !</p>
]]>
        </content:encoded>
      </item>
    </channel>
  </rss>